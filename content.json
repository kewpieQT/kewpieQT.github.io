{"pages":[],"posts":[{"title":"test","text":"This is a test article.","link":"/2021/03/27/test/"},{"title":"Kotlin 学习笔记","text":"Kotlin 与 Java 互相调用时需要注意的细节：###关键字冲突在 Kotlin 中调用 Java 代码时，如果发生关键字冲突，需要将关键字用’’包裹起来。 1234Java codepublic class JavaMain{ public static String in = &quot;in&quot;;} 1234Kotlin codefun main(args:Array&lt;String&gt;){ var str = JavaMain.'in'} ###Kotlin 中编译器推断 Java 类型在 Kotlin 中调用 Java 函数，将其 String 类型的返回值赋值给一个变量，如果没有直接指定变量类型，则编译器推断该类型为 String!；这个类型不适用 Kotlin 的空指针敏感特性，需要手动判空。 123456Java codepublic class JavaMain{ public static String getStr(){ return null; }} 12345678Kotlin codefun main(args:Array&lt;String&gt;){ var str:String! = JavaMain.getStr() println(str.length) //运行时空指针异常 var str1:String = JavaMain.getStr() //运行时类型错误，str1 为非空类型，不能将 null 赋值给一个非空类型 var str2:String? = JavaMain.getStr() println(str2?.length) //正常运行输出 null} ###Kotlin 中的静态变量与静态方法 123456789101112Kotlin codeobject Test{ val str = &quot;&quot; //对应Java 代码 private static final String str = &quot;&quot;; //会自动生成 get 方法用于获取 str 的值。 //public String getStr(){ return str; } const val str1 = &quot;&quot; //对应Java 代码 public static final String str1 = &quot;&quot;; fun func(){} //普通方法 @JvmStatic fun func1(){} //静态方法} 123456Java code String str = Test.INSTANCE.getStr();//通过普通方法获取静态变量 String str1 = Test.str1; //直接获取静态变量 Utils.INSTANCE.func(); //调用普通方法 Utils.func1(); //调用静态方法","link":"/2021/03/29/KotlinStudyNotes/"}],"tags":[],"categories":[]}